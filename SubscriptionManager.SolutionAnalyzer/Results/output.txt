Plik: SubscriptionManager.UI\App.xaml
<?xml version = "1.0" encoding = "UTF-8" ?>
<Application xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:SubscriptionManager.UI"
             xmlns:converters="clr-namespace:SubscriptionManager.UI.Converters"
             x:Class="SubscriptionManager.UI.App">
    <Application.Resources>
        <ResourceDictionary>
            <converters:AvatarConverter x:Key="AvatarConverter" />
            <converters:SelectionChangedEventArgsConverter x:Key="SelectionChangedEventArgsConverter" />
            <converters:GuidIsNotEmptyConverter x:Key="GuidIsNotEmptyConverter"/>
            <converters:SubscriptionStatusConverter x:Key="SubscriptionStatusConverter"/>
            <converters:SubscriptionStatusColorConverter x:Key="SubscriptionStatusColorConverter"/>
            <converters:SubscriptionStatusBackgroundConverter x:Key="SubscriptionStatusBackgroundConverter"/>
            <converters:InverseBoolConverter x:Key="InverseBoolConverter"/>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Styles/Colors.xaml" />
                <ResourceDictionary Source="Resources/Styles/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>

---
Plik: SubscriptionManager.UI\App.xaml.cs
using Microsoft.EntityFrameworkCore;
using SubscriptionManager.Infrastructure.Data;

namespace SubscriptionManager.UI;

public partial class App : Microsoft.Maui.Controls.Application
{
    public App()
    {
        InitializeComponent();

        using (var scope = IPlatformApplication.Current.Services.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<SubscriptionDbContext>();
            dbContext.Database.Migrate();
        }

        MainPage = new AppShell();
    }
}

---
Plik: SubscriptionManager.UI\AppShell.xaml
<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="SubscriptionManager.UI.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:SubscriptionManager.UI"
    xmlns:views="clr-namespace:SubscriptionManager.UI.Views"
    Shell.FlyoutBehavior="Disabled"
    BackgroundColor="{StaticResource BackgroundColor}"
    Title="SubscriptionManager.UI">

    <ShellContent 
        ContentTemplate="{DataTemplate views:SubscriptionListPage}" 
        Route="list"/>

    <ShellContent 
        ContentTemplate="{DataTemplate views:SubscriptionEditPage}" 
        Route="edit"/>

</Shell>

---
Plik: SubscriptionManager.UI\AppShell.xaml.cs
using SubscriptionManager.UI.Views;

namespace SubscriptionManager.UI;

public partial class AppShell : Shell
{
    public AppShell()
    {
        InitializeComponent();

        Routing.RegisterRoute("edit", typeof(SubscriptionEditPage));
    }
}

---
Plik: SubscriptionManager.UI\MauiProgram.cs
using CommunityToolkit.Maui;
using Microsoft.Extensions.Logging;
using PanCardView;
using SubscriptionManager.Application.Interfaces;
using SubscriptionManager.Application.Mapping;
using SubscriptionManager.Application.Services;
using SubscriptionManager.Infrastructure.Data;
using SubscriptionManager.Infrastructure.Mapping;
using SubscriptionManager.Infrastructure.Repositories;
using SubscriptionManager.Infrastructure.Services;
using SubscriptionManager.UI.Services;
using SubscriptionManager.UI.ViewModels;
using SubscriptionManager.UI.Views;
using Microsoft.EntityFrameworkCore;

namespace SubscriptionManager.UI;

public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder
            .UseMauiApp<App>()
            .UseMauiCommunityToolkit()
            .UseCardsView()
            .ConfigureFonts(fonts =>
            {
                fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
            });

        builder.Services.AddSingleton<IFileSystemService, FileSystemService>();
        builder.Services.AddSingleton<IDbPathProvider, DbPathProvider>();

        builder.Services.AddDbContext<SubscriptionDbContext>((services, options) =>
        {
            var dbPath = services.GetRequiredService<IDbPathProvider>().GetDbPath();
            options.UseSqlite($"Data Source={dbPath}");
        }, ServiceLifetime.Scoped);

        builder.Services.AddScoped<ISubscriptionRepository, SQLiteSubscriptionRepository>();

        builder.Services.AddScoped<ISubscriptionService, SubscriptionService>();
        builder.Services.AddSingleton<IAvatarService, AvatarService>();

        builder.Services.AddAutoMapper(typeof(ApplicationMappingProfile).Assembly, typeof(InfrastructureMappingProfile).Assembly);

        builder.Services.AddTransient<SubscriptionListPage>();
        builder.Services.AddTransient<SubscriptionListViewModel>();

        builder.Services.AddTransient<SubscriptionEditPage>();
        builder.Services.AddTransient<SubscriptionEditViewModel>();

#if DEBUG
        builder.Logging.AddDebug();
#endif

        return builder.Build();
    }
}
---
Plik: SubscriptionManager.UI\Converters\AvatarConverter.cs
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class AvatarConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        string path = value as string;
        if (string.IsNullOrEmpty(path))
        {
            return "logo_netflix.png";
        }
        return path;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}

---
Plik: SubscriptionManager.UI\Converters\GuidIsNotEmptyConverter.cs
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class GuidIsNotEmptyConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is Guid guid)
        {
            return guid != Guid.Empty;
        }

        return false;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
---
Plik: SubscriptionManager.UI\Converters\InverseBoolConverter.cs
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class InverseBoolConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is bool boolValue)
        {
            return !boolValue;
        }
        return value;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is bool boolValue)
        {
            return !boolValue;
        }
        return value;
    }
}
---
Plik: SubscriptionManager.UI\Converters\SelectionChangedEventArgsConverter.cs
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class SelectionChangedEventArgsConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        var args = value as SelectionChangedEventArgs;
        return args?.CurrentSelection.FirstOrDefault();
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}

---
Plik: SubscriptionManager.UI\Converters\SubscriptionStatusBackgroundConverter.cs
using SubscriptionManager.Application.DTOs;
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class SubscriptionStatusBackgroundConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is SubscriptionStatusDto status)
        {
            return status switch
            {
                SubscriptionStatusDto.Active => Microsoft.Maui.Controls.Application.Current.Resources["SuccessLight"],
                SubscriptionStatusDto.Expiring => Microsoft.Maui.Controls.Application.Current.Resources["WarningLight"],
                SubscriptionStatusDto.Inactive => Microsoft.Maui.Controls.Application.Current.Resources["DangerLight"],
                _ => Microsoft.Maui.Controls.Application.Current.Resources["Gray200"]
            };
        }

        return Microsoft.Maui.Controls.Application.Current.Resources["Gray200"];
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}

---
Plik: SubscriptionManager.UI\Converters\SubscriptionStatusColorConverter.cs
using SubscriptionManager.Application.DTOs;
using System.Globalization;

namespace SubscriptionManager.UI.Converters;

public class SubscriptionStatusColorConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is SubscriptionStatusDto status)
        {
            return status switch
            {
                SubscriptionStatusDto.Active => Microsoft.Maui.Controls.Application.Current.Resources["Success"],
                SubscriptionStatusDto.Expiring => Microsoft.Maui.Controls.Application.Current.Resources["Warning"],
                SubscriptionStatusDto.Inactive => Microsoft.Maui.Controls.Application.Current.Resources["Danger"],
                _ => Microsoft.Maui.Controls.Application.Current.Resources["TextTertiary"]
            };
        }

        return Microsoft.Maui.Controls.Application.Current.Resources["TextTertiary"];
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}

---
Plik: SubscriptionManager.UI\Converters\SubscriptionStatusConverter.cs
using System.Globalization;
using SubscriptionManager.Application.DTOs;

namespace SubscriptionManager.UI.Converters;

public class SubscriptionStatusConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is SubscriptionStatusDto status)
        {
            return status switch
            {
                SubscriptionStatusDto.Active => "Aktywna",
                SubscriptionStatusDto.Expiring => "Wygasa",
                SubscriptionStatusDto.Inactive => "Nieaktywna",
                _ => "Nieznany"
            };
        }

        return "Nieznany";
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
---
Plik: SubscriptionManager.UI\Services\FileSystemService.cs
using SubscriptionManager.Application.Interfaces;

namespace SubscriptionManager.UI.Services;

public class FileSystemService : IFileSystemService
{
    public string GetAppDataDirectory()
    {
        return FileSystem.AppDataDirectory;
    }
}
---
Plik: SubscriptionManager.UI\ViewModels\SubscriptionEditViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SubscriptionManager.Application.DTOs;
using SubscriptionManager.Application.Interfaces;
using System.Collections.ObjectModel;

namespace SubscriptionManager.UI.ViewModels;

[QueryProperty(nameof(SubscriptionId), "id")]
public partial class SubscriptionEditViewModel : ObservableObject
{
    private readonly ISubscriptionService _subscriptionService;
    private readonly IAvatarService _avatarService;

    private SubscriptionDto _subscription;

    [ObservableProperty]
    private string pageTitle = "Dodaj Subskrypcję";

    [ObservableProperty]
    private Guid _subscriptionId;

    [ObservableProperty]
    private string _name = string.Empty;

    [ObservableProperty]
    private decimal _price;

    [ObservableProperty]
    private DateTime _startDate = DateTime.Today;

    [ObservableProperty]
    private DateTime _endDate = DateTime.Today.AddMonths(1);

    [ObservableProperty]
    private string _avatarPath = "logo_upload.png";

    [ObservableProperty]
    private ObservableCollection<string> _avatars;

    public SubscriptionEditViewModel(ISubscriptionService subscriptionService, IAvatarService avatarService)
    {
        _subscriptionService = subscriptionService;
        _avatarService = avatarService;
        _subscription = new SubscriptionDto()
        {
            DateFrom = DateTime.Today,
            DateTo = DateTime.Today.AddMonths(1)
        };
        Avatars = new ObservableCollection<string>(_avatarService.GetAvailableAvatars());
    }

    [RelayCommand]
    private void Appearing()
    {
        LoadSubscriptionCommand.Execute(null);
    }

    [RelayCommand]
    private async Task LoadSubscriptionAsync()
    {
        if (SubscriptionId == Guid.Empty)
        {
            return;
        }

        var subscription = await _subscriptionService.GetSubscriptionByIdAsync(SubscriptionId);
        if (subscription == null)
        {
            return;
        }

        _subscription = subscription;
        MapSubscriptionToProperties(_subscription);
        HandleAvatar(_subscription.AvatarPath);
        PageTitle = "Edytuj Subskrypcję";
    }

    [RelayCommand]
    private async Task SaveAsync()
    {
        try
        {
            MapPropertiesToSubscription(_subscription);

            if (SubscriptionId == Guid.Empty)
            {
                await _subscriptionService.AddSubscriptionAsync(_subscription);
            }
            else
            {
                await _subscriptionService.UpdateSubscriptionAsync(_subscription);
            }

            await Shell.Current.GoToAsync("..");
        }
        catch (Exception ex)
        {
            await Shell.Current.DisplayAlert("Błąd", ex.Message, "OK");
        }
    }

    [RelayCommand]
    private async Task CancelAsync()
    {
        await Shell.Current.GoToAsync("..");
    }

    [RelayCommand]
    private async Task DeleteAsync() 
    {
        if (SubscriptionId == Guid.Empty)
            return;

        try
        {
            await _subscriptionService.DeleteSubscriptionAsync(SubscriptionId);
            await Shell.Current.GoToAsync("..");
        }
        catch (Exception ex)
        {
            await Shell.Current.DisplayAlert("Błąd", ex.Message, "OK");
        }
    }

    [RelayCommand]
    private async Task AvatarTappedAsync()
    {
        if (AvatarPath == "logo_upload.png")
        {
            await PickAvatarAsync();
        }
    }

    [RelayCommand]
    private async Task PickAvatarAsync()
    {
        try
        {
            var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                PickerTitle = "Wybierz avatar",
                FileTypes = FilePickerFileType.Images
            });

            if (result != null)
            {
                var newFilePath = Path.Combine(FileSystem.AppDataDirectory, result.FileName);

                using (var stream = await result.OpenReadAsync())
                using (var newStream = File.OpenWrite(newFilePath))
                {
                    await stream.CopyToAsync(newStream);
                }

                if (!Avatars.Contains(newFilePath))
                {
                    Avatars.Add(newFilePath);
                }

                AvatarPath = newFilePath;
            }
        }
        catch (Exception ex)
        {
            await Shell.Current.DisplayAlert("Błąd", ex.Message, "OK");
        }
    }

    private void MapSubscriptionToProperties(SubscriptionDto subscription)
    {
        Name = subscription.Name;
        Price = subscription.Price;
        StartDate = subscription.DateFrom;
        EndDate = subscription.DateTo;
        AvatarPath = subscription.AvatarPath;
    }

    private void MapPropertiesToSubscription(SubscriptionDto subscription)
    {
        subscription.Name = Name;
        subscription.Price = Price;
        subscription.DateFrom = StartDate;
        subscription.DateTo = EndDate;
        subscription.AvatarPath = AvatarPath;
    }

    private void HandleAvatar(string avatarPath)
    {
        if (string.IsNullOrEmpty(avatarPath)) return;

        if (!Avatars.Contains(avatarPath))
        {
            Avatars.Add(avatarPath);
        }

        AvatarPath = avatarPath;
    }
}
---
Plik: SubscriptionManager.UI\ViewModels\SubscriptionListViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SubscriptionManager.Application.DTOs;
using SubscriptionManager.Application.Interfaces;
using System.Collections.ObjectModel;

namespace SubscriptionManager.UI.ViewModels;

public partial class SubscriptionListViewModel : ObservableObject
{
    private readonly ISubscriptionService _subscriptionService;

    [ObservableProperty]
    private SubscriptionDto? _selectedSubscription;

    [ObservableProperty]
    public ObservableCollection<SubscriptionDto> subscriptions;

    [ObservableProperty]
    private bool _isScrolling = false;

    private CancellationTokenSource? _scrollResetCts;

    public SubscriptionListViewModel(ISubscriptionService subscriptionService)
    {
        _subscriptionService = subscriptionService;
        Subscriptions = new ObservableCollection<SubscriptionDto>();
    }

    [RelayCommand]
    void Appearing()
    {
        LoadSubscriptionsCommand.Execute(null);
    }

    [RelayCommand]
    private async Task LoadSubscriptions()
    {
        var subs = await _subscriptionService.GetAllSubscriptionsAsync();
        Subscriptions.Clear();
        foreach (var sub in subs)
        {
            Subscriptions.Add(sub);
        }
    }

    [RelayCommand]
    private async Task AddSubscription()
    {
        await Shell.Current.GoToAsync("edit");
    }

    [RelayCommand]
    private async Task SelectedSubscriptionChanged(SubscriptionDto selectedSubscription)
    {
        if (selectedSubscription != null)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>
                {
                    { "id",selectedSubscription.Id}
                };

            await Shell.Current.GoToAsync("edit", parameters);
            SelectedSubscription = null;
        }
    }

    [RelayCommand]
    private void ScrollStarted()
    {
        IsScrolling = true;
        ResetScrollTimer();
    }

    private void ResetScrollTimer()
    {
        _scrollResetCts?.Cancel();
        _scrollResetCts = new CancellationTokenSource();

        Task.Delay(600, _scrollResetCts.Token).ContinueWith(t =>
        {
            if (!t.IsCanceled)
            {
                MainThread.BeginInvokeOnMainThread(() => {
                    IsScrolling = false;
                });
            }
        });
    }
}
---
Plik: SubscriptionManager.UI\Views\SubscriptionEditPage.xaml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodels="clr-namespace:SubscriptionManager.UI.ViewModels"
             x:Class="SubscriptionManager.UI.Views.SubscriptionEditPage"
             xmlns:toolkit="clr-namespace:CommunityToolkit.Maui.Behaviors;assembly=CommunityToolkit.Maui"
             xmlns:cards="clr-namespace:PanCardView;assembly=PanCardView"
             xmlns:controls="clr-namespace:PanCardView.Controls;assembly=PanCardView"
             xmlns:proc="clr-namespace:PanCardView.Processors;assembly=PanCardView"
             xmlns:converters="clr-namespace:SubscriptionManager.UI.Converters"
             Shell.NavBarIsVisible="False"
             BackgroundColor="{StaticResource BackgroundColor}">

    <ContentPage.Behaviors>
        <toolkit:EventToCommandBehavior EventName="Appearing" Command="{Binding AppearingCommand}"/>
    </ContentPage.Behaviors>

    <ScrollView>
        <VerticalStackLayout Padding="20" Spacing="8">
            <Label Text="Edycja subskrypcji" 
                   Style="{StaticResource HeaderStyle}"
                   Margin="4,0,0,8"/>

            <!-- Avatar Selection Section -->
            <Border Style="{StaticResource CardStyle}">
                <VerticalStackLayout Spacing="16">
                    <Label Text="Wybierz avatar" 
                           Style="{StaticResource SubheaderStyle}"
                           HorizontalOptions="Center"/>

                    <cards:CoverFlowView x:Name="AvatarCarousel" 
                                      ItemsSource="{Binding Avatars}" 
                                      SelectedItem="{Binding AvatarPath, Mode=TwoWay}" 
                                      HeightRequest="160" 
                                      PositionShiftValue="145"
                                      IsCyclical="True">
                        <x:Arguments>
                            <proc:CoverFlowProcessor ScaleFactor="0.50" OpacityFactor="0.25" />
                        </x:Arguments>

                        <cards:CoverFlowView.ItemTemplate>
                            <DataTemplate>
                                <Frame Margin="80"
                                       Padding="0"
                                       HasShadow="False"
                                       IsClippedToBounds="True"
                                       CornerRadius="50"
                                       HorizontalOptions="Center"
                                       VerticalOptions="Center"
                                       BackgroundColor="{StaticResource SurfaceColor}"
                                       BorderColor="{StaticResource Border}">
                                    <Image Source="{Binding .}" 
                                           Aspect="AspectFit" 
                                           HeightRequest="100" 
                                           WidthRequest="100"
                                           Margin="5">
                                        <Image.GestureRecognizers>
                                            <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodels:SubscriptionEditViewModel}}, Path=AvatarTappedCommand}" />
                                        </Image.GestureRecognizers>
                                    </Image>
                                </Frame>
                            </DataTemplate>
                        </cards:CoverFlowView.ItemTemplate>
                    </cards:CoverFlowView>

                    <Label Text="Przeciągnij w lewo lub prawo, aby wybrać avatar" 
                           Style="{StaticResource HintStyle}"/>
                </VerticalStackLayout>
            </Border>

            <!-- Form Fields Section -->
            <Border Style="{StaticResource CardStyle}">
                <VerticalStackLayout Spacing="20">
                    <!-- Name Field -->
                    <VerticalStackLayout>
                        <Label Text="Nazwa subskrypcji" 
                               Style="{StaticResource FieldLabelStyle}"/>

                        <Border Style="{StaticResource InputContainerStyle}">
                            <Entry Text="{Binding Name}" 
                                   Placeholder="Wpisz nazwę usługi" 
                                   Style="{StaticResource InputStyle}"/>
                        </Border>
                    </VerticalStackLayout>

                    <!-- Price Field -->
                    <VerticalStackLayout>
                        <Label Text="Cena (zł/miesiąc)" 
                               Style="{StaticResource FieldLabelStyle}"/>

                        <Border Style="{StaticResource InputContainerStyle}">
                            <Entry Text="{Binding Price}" 
                                   Keyboard="Numeric" 
                                   Placeholder="0.00" 
                                   Style="{StaticResource InputStyle}"/>
                        </Border>
                    </VerticalStackLayout>

                    <!-- Date Fields -->
                    <Grid ColumnDefinitions="*, *" ColumnSpacing="16">
                        <!-- Start Date Field -->
                        <VerticalStackLayout Grid.Column="0">
                            <Label Text="Data  rozpoczęcia" 
                                   Style="{StaticResource FieldLabelStyle}"/>

                            <Border Style="{StaticResource InputContainerStyle}">
                                <DatePicker Date="{Binding StartDate}" 
                                            Style="{StaticResource InputStyle}"
                                            VerticalOptions="Center"/>
                            </Border>
                        </VerticalStackLayout>

                        <!-- End Date Field -->
                        <VerticalStackLayout Grid.Column="1">
                            <Label Text="Data zakończenia" 
                                   Style="{StaticResource FieldLabelStyle}"/>

                            <Border Style="{StaticResource InputContainerStyle}">
                                <DatePicker Date="{Binding EndDate}" 
                                            Style="{StaticResource InputStyle}"
                                            VerticalOptions="Center"/>
                            </Border>
                        </VerticalStackLayout>
                    </Grid>
                </VerticalStackLayout>
            </Border>

            <!-- Action Buttons Section -->
            <Grid ColumnDefinitions="*, *" 
                  ColumnSpacing="16" 
                  Margin="0,16,0,0">

                <Button Text="Anuluj" 
                        Command="{Binding CancelCommand}" 
                        Grid.Column="0" 
                        Style="{StaticResource SecondaryButtonStyle}"/>

                <Button Text="Zapisz" 
                        Command="{Binding SaveCommand}" 
                        Grid.Column="1" 
                        Style="{StaticResource PrimaryButtonStyle}"/>
            </Grid>

            <!-- Delete Button (Only visible when editing) -->
            <Button Text="Usuń subskrypcję" 
                    Command="{Binding DeleteCommand}" 
                    IsVisible="{Binding SubscriptionId, Converter={StaticResource GuidIsNotEmptyConverter}}" 
                    Style="{StaticResource DangerButtonStyle}"
                    Margin="0,12,0,0"/>
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>
---
Plik: SubscriptionManager.UI\Views\SubscriptionEditPage.xaml.cs
using SubscriptionManager.UI.ViewModels;

namespace SubscriptionManager.UI.Views;

public partial class SubscriptionEditPage : ContentPage
{
    public SubscriptionEditPage(SubscriptionEditViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
    }
}
---
Plik: SubscriptionManager.UI\Views\SubscriptionListPage.xaml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="SubscriptionManager.UI.Views.SubscriptionListPage"
             xmlns:viewmodels="clr-namespace:SubscriptionManager.UI.ViewModels"
             xmlns:toolkit="clr-namespace:CommunityToolkit.Maui.Behaviors;assembly=CommunityToolkit.Maui"
             xmlns:converters="clr-namespace:SubscriptionManager.UI.Converters"
             BackgroundColor="{StaticResource BackgroundColor}">

    <!-- Page Behaviors -->
    <ContentPage.Behaviors>
        <toolkit:EventToCommandBehavior 
            EventName="Appearing" 
            Command="{Binding AppearingCommand}"/>
    </ContentPage.Behaviors>

    <!-- Main Content -->
    <Grid RowDefinitions="Auto,*" Padding="0,12,0,0">
        <!-- Header (optional) -->
        <Label Text="Twoje subskrypcje" 
               Style="{StaticResource HeaderStyle}"
               Margin="20,0,0,12"
               Grid.Row="0" />

        <!-- Subscription List wrapped in ScrollView to detect scrolling -->
        <ScrollView Grid.Row="1" x:Name="subscriptionScrollView">
            <ScrollView.Behaviors>
                <toolkit:EventToCommandBehavior 
                    EventName="Scrolled" 
                    Command="{Binding ScrollStartedCommand}" />
            </ScrollView.Behaviors>

            <CollectionView ItemsSource="{Binding Subscriptions}"
                          SelectedItem="{Binding SelectedSubscription}"
                          SelectionMode="Single">
                <CollectionView.Behaviors>
                    <toolkit:EventToCommandBehavior 
                        EventName="SelectionChanged" 
                        Command="{Binding SelectedSubscriptionChangedCommand}"
                        EventArgsConverter="{StaticResource SelectionChangedEventArgsConverter}" />
                </CollectionView.Behaviors>

                <CollectionView.ItemsLayout>
                    <LinearItemsLayout Orientation="Vertical" ItemSpacing="0"/>
                </CollectionView.ItemsLayout>

                <CollectionView.EmptyView>
                    <StackLayout VerticalOptions="Center" HorizontalOptions="Center" Padding="24">
                        <Image Source="empty_state.png" HeightRequest="150" Opacity="0.6" Margin="0,0,0,20" />
                        <Label Text="Brak aktywnych subskrypcji" 
                             Style="{StaticResource SubheaderStyle}"
                             HorizontalTextAlignment="Center" />
                        <Label Text="Dodaj swoją pierwszą subskrypcję klikając przycisk '+'" 
                             Style="{StaticResource HintStyle}"
                             HorizontalTextAlignment="Center"
                             Margin="40,8,40,0" />
                    </StackLayout>
                </CollectionView.EmptyView>

                <CollectionView.ItemTemplate>
                    <DataTemplate>
                        <Border Style="{StaticResource CardStyle}" Margin="16,8,16,8">
                            <Grid ColumnDefinitions="Auto,*,Auto" ColumnSpacing="16">
                                <!-- Avatar -->
                                <Border Style="{StaticResource AvatarContainerStyle}" Grid.Column="0">
                                    <Image Source="{Binding AvatarPath, Converter={StaticResource AvatarConverter}}"
                                         WidthRequest="60"
                                         HeightRequest="60"
                                         Aspect="AspectFit" />
                                </Border>

                                <!-- Subscription Details -->
                                <VerticalStackLayout Grid.Column="1" VerticalOptions="Center" Spacing="2">
                                    <Label Text="{Binding Name}" Style="{StaticResource TitleStyle}" />

                                    <Grid ColumnDefinitions="Auto,*" RowDefinitions="Auto,Auto" ColumnSpacing="6">
                                        <!-- From Date -->
                                        <Label Text="Od:" 
                                             Grid.Row="0" 
                                             Grid.Column="0"
                                             TextColor="{StaticResource TextTertiary}"
                                             FontSize="13" />
                                        <Label Text="{Binding DateFrom, StringFormat='{0:dd MMM yyyy}'}" 
                                             Grid.Row="0" 
                                             Grid.Column="1"
                                             Style="{StaticResource DateStyle}" />

                                        <!-- To Date -->
                                        <Label Text="Do:" 
                                             Grid.Row="1" 
                                             Grid.Column="0"
                                             TextColor="{StaticResource TextTertiary}"
                                             FontSize="13" />
                                        <Label Text="{Binding DateTo, StringFormat='{0:dd MMM yyyy}'}" 
                                             Grid.Row="1" 
                                             Grid.Column="1"
                                             Style="{StaticResource DateStyle}" />
                                    </Grid>
                                </VerticalStackLayout>

                                <!-- Price -->
                                <VerticalStackLayout Grid.Column="2" VerticalOptions="Center" HorizontalOptions="End">
                                    <Label Text="{Binding Price, StringFormat='{0} zł'}" 
                                         Style="{StaticResource PriceStyle}" />

                                    <!-- Status Indicator -->
                                    <Border Style="{StaticResource StatusBadgeStyle}"
                                          BackgroundColor="{Binding Status, Converter={StaticResource SubscriptionStatusBackgroundConverter}}" 
                                          HorizontalOptions="End"
                                          Margin="0,4,0,0">
                                        <Label Text="{Binding Status, Converter={StaticResource SubscriptionStatusConverter}}" 
                                             TextColor="{Binding Status, Converter={StaticResource SubscriptionStatusColorConverter}}"
                                             FontSize="11"
                                             FontAttributes="Bold" />
                                    </Border>
                                </VerticalStackLayout>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </ScrollView>

        <!-- Floating Action Button with opacity tied to scrolling state -->
        <Button Text="+"
                Style="{StaticResource FloatingActionButtonStyle}"
                Command="{Binding AddSubscriptionCommand}"
                Grid.Row="1"
                Opacity="{Binding IsScrolling, Converter={StaticResource InverseBoolConverter}, ConverterParameter=1}">
            <Button.Triggers>
                <DataTrigger TargetType="Button"
                             Binding="{Binding IsScrolling}"
                             Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                    <Setter Property="InputTransparent" Value="True" />
                </DataTrigger>
                <DataTrigger TargetType="Button"
                             Binding="{Binding IsScrolling}"
                             Value="False">
                    <Setter Property="IsEnabled" Value="True" />
                    <Setter Property="InputTransparent" Value="False" />
                </DataTrigger>
            </Button.Triggers>
        </Button>
    </Grid>
</ContentPage>
---
Plik: SubscriptionManager.UI\Views\SubscriptionListPage.xaml.cs
using SubscriptionManager.UI.ViewModels;

namespace SubscriptionManager.UI.Views;

public partial class SubscriptionListPage : ContentPage
{
    public SubscriptionListPage(SubscriptionListViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = viewModel;
    }
}
---
Plik: SubscriptionManager.UI\Platforms\Android\MainActivity.cs
using Android.App;
using Android.Content.PM;

namespace SubscriptionManager.UI
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}

---
Plik: SubscriptionManager.UI\Platforms\Android\MainApplication.cs
using Android.App;
using Android.Runtime;

namespace SubscriptionManager.UI
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}

---
Plik: SubscriptionManager.UI\Platforms\iOS\AppDelegate.cs
using Foundation;

namespace SubscriptionManager.UI
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}

---
Plik: SubscriptionManager.UI\Platforms\iOS\Program.cs
using UIKit;

namespace SubscriptionManager.UI
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}

---
Plik: SubscriptionManager.UI\Platforms\MacCatalyst\AppDelegate.cs
using Foundation;

namespace SubscriptionManager.UI
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}

---
Plik: SubscriptionManager.UI\Platforms\MacCatalyst\Program.cs
using UIKit;

namespace SubscriptionManager.UI
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}

---
Plik: SubscriptionManager.UI\Platforms\Tizen\Main.cs
using Microsoft.Maui;
using Microsoft.Maui.Hosting;
using System;

namespace SubscriptionManager.UI
{
    internal class Program : MauiApplication
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();

        static void Main(string[] args)
        {
            var app = new Program();
            app.Run(args);
        }
    }
}

---
Plik: SubscriptionManager.UI\Platforms\Windows\App.xaml
<maui:MauiWinUIApplication
    x:Class="SubscriptionManager.UI.WinUI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:maui="using:Microsoft.Maui"
    xmlns:local="using:SubscriptionManager.UI.WinUI">

</maui:MauiWinUIApplication>

---
Plik: SubscriptionManager.UI\Platforms\Windows\App.xaml.cs
// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace SubscriptionManager.UI.WinUI
{
    /// <summary>
    /// Provides application-specific behavior to supplement the default Application class.
    /// </summary>
    public partial class App : MauiWinUIApplication
    {
        /// <summary>
        /// Initializes the singleton application object.  This is the first line of authored code
        /// executed, and as such is the logical equivalent of main() or WinMain().
        /// </summary>
        public App()
        {
            this.InitializeComponent();
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }

}

---
Plik: SubscriptionManager.UI\Resources\Styles\Colors.xaml
<?xml version="1.0" encoding="UTF-8" ?>
<?xaml-comp compile="true" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml">

    <!-- Podstawowa paleta kolorów aplikacji -->
    <Color x:Key="Primary">#2D5AF8</Color>
    <Color x:Key="PrimaryDark">#1A46E0</Color>
    <Color x:Key="PrimaryLight">#8FAFFF</Color>
    <Color x:Key="Secondary">#F8F9FA</Color>
    <Color x:Key="Tertiary">#50E3C2</Color>

    <!-- Kolory tła -->
    <Color x:Key="BackgroundColor">#F0F2F5</Color>
    <Color x:Key="SurfaceColor">White</Color>
    <Color x:Key="CardBackgroundColor">White</Color>

    <!-- Kolory tekstu -->
    <Color x:Key="TextPrimary">#333333</Color>
    <Color x:Key="TextSecondary">#666666</Color>
    <Color x:Key="TextTertiary">#999999</Color>
    <Color x:Key="TextOnPrimary">White</Color>

    <!-- Kolory statusów -->
    <Color x:Key="Success">#34A853</Color>
    <Color x:Key="SuccessLight">#E6F4EA</Color>
    <Color x:Key="Warning">#FBBC04</Color>
    <Color x:Key="WarningLight">#FEF7E0</Color>
    <Color x:Key="Danger">#DC3545</Color>
    <Color x:Key="DangerLight">#FADDE0</Color>
    <Color x:Key="Info">#4A90E2</Color>
    <Color x:Key="InfoLight">#E3F2FD</Color>

    <!-- Kolory obramowań -->
    <Color x:Key="Border">#E0E0E0</Color>
    <Color x:Key="BorderLight">#F0F0F0</Color>

    <!-- Kolory podstawowe -->
    <Color x:Key="White">White</Color>
    <Color x:Key="Black">#1F1F1F</Color>

    <!-- Odcienie szarości -->
    <Color x:Key="Gray100">#F8F9FA</Color>
    <Color x:Key="Gray200">#E9ECEF</Color>
    <Color x:Key="Gray300">#DEE2E6</Color>
    <Color x:Key="Gray400">#CED4DA</Color>
    <Color x:Key="Gray500">#ADB5BD</Color>
    <Color x:Key="Gray600">#6C757D</Color>
    <Color x:Key="Gray700">#495057</Color>
    <Color x:Key="Gray800">#343A40</Color>
    <Color x:Key="Gray900">#212529</Color>

    <!-- Pędzle kolorów -->
    <SolidColorBrush x:Key="PrimaryBrush" Color="{StaticResource Primary}"/>
    <SolidColorBrush x:Key="SecondaryBrush" Color="{StaticResource Secondary}"/>
    <SolidColorBrush x:Key="TertiaryBrush" Color="{StaticResource Tertiary}"/>
    <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="SurfaceBrush" Color="{StaticResource SurfaceColor}"/>
    <SolidColorBrush x:Key="TextPrimaryBrush" Color="{StaticResource TextPrimary}"/>
    <SolidColorBrush x:Key="TextSecondaryBrush" Color="{StaticResource TextSecondary}"/>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource Border}"/>

    <!-- Cienie -->
    <Shadow x:Key="SmallShadow"
            Brush="#20000000"
            Opacity="1"
            Radius="4"
            Offset="0,2"/>

    <Shadow x:Key="MediumShadow"
            Brush="#20000000"
            Opacity="1"
            Radius="8"
            Offset="0,4"/>

    <Shadow x:Key="LargeShadow"
            Brush="#20000000"
            Opacity="1"
            Radius="16"
            Offset="0,8"/>

</ResourceDictionary>
---
Plik: SubscriptionManager.UI\Resources\Styles\Styles.xaml
<?xml version="1.0" encoding="UTF-8" ?>
<?xaml-comp compile="true" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml">

    <!-- ==================== -->
    <!-- STYLE KOMPONENTÓW UI -->
    <!-- ==================== -->

    <!-- KARTY -->
    <Style x:Key="CardStyle" TargetType="Border">
        <Setter Property="StrokeShape" Value="RoundRectangle 16" />
        <Setter Property="Stroke" Value="Transparent" />
        <Setter Property="BackgroundColor" Value="{StaticResource CardBackgroundColor}" />
        <Setter Property="Padding" Value="20" />
        <Setter Property="Shadow" Value="{StaticResource MediumShadow}" />
    </Style>

    <!-- KONTENERY -->
    <Style x:Key="RoundedContainerStyle" TargetType="Border">
        <Setter Property="StrokeShape" Value="RoundRectangle 12" />
        <Setter Property="Stroke" Value="{StaticResource Border}" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="BackgroundColor" Value="{StaticResource Secondary}" />
        <Setter Property="Padding" Value="12" />
    </Style>

    <!-- AVATAR -->
    <Style x:Key="AvatarContainerStyle" TargetType="Border">
        <Setter Property="StrokeShape" Value="RoundRectangle 50" />
        <Setter Property="BackgroundColor" Value="{StaticResource BackgroundColor}" />
        <Setter Property="Stroke" Value="Transparent" />
        <Setter Property="WidthRequest" Value="70" />
        <Setter Property="HeightRequest" Value="70" />
        <Setter Property="HorizontalOptions" Value="Start" />
    </Style>

    <!-- PRZYCISKI -->
    <Style x:Key="PrimaryButtonStyle" TargetType="Button">
        <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="TextColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="HeightRequest" Value="50" />
        <Setter Property="Margin" Value="0,4" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="BackgroundColor" Value="{StaticResource Gray300}" />
                            <Setter Property="TextColor" Value="{StaticResource Gray600}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style x:Key="SecondaryButtonStyle" TargetType="Button">
        <Setter Property="BackgroundColor" Value="{StaticResource Secondary}" />
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="BorderColor" Value="{StaticResource Border}" />
        <Setter Property="BorderWidth" Value="1" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="HeightRequest" Value="50" />
        <Setter Property="Margin" Value="0,4" />
    </Style>

    <Style x:Key="DangerButtonStyle" TargetType="Button">
        <Setter Property="BackgroundColor" Value="{StaticResource Danger}" />
        <Setter Property="TextColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="HeightRequest" Value="50" />
        <Setter Property="Margin" Value="0,4" />
    </Style>

    <Style x:Key="FloatingActionButtonStyle" TargetType="Button">
        <Setter Property="TextColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="WidthRequest" Value="56" />
        <Setter Property="HeightRequest" Value="56" />
        <Setter Property="CornerRadius" Value="28" />
        <Setter Property="HorizontalOptions" Value="End" />
        <Setter Property="VerticalOptions" Value="End" />
        <Setter Property="Margin" Value="0,0,24,24" />
    </Style>

    <!-- ETYKIETY/TEKST -->
    <Style x:Key="HeaderStyle" TargetType="Label">
        <Setter Property="FontSize" Value="24" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="Margin" Value="0,0,0,12" />
    </Style>

    <Style x:Key="SubheaderStyle" TargetType="Label">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="Margin" Value="0,0,0,8" />
    </Style>

    <Style x:Key="TitleStyle" TargetType="Label">
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="Margin" Value="0,0,0,4" />
    </Style>

    <Style x:Key="FieldLabelStyle" TargetType="Label">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="TextColor" Value="{StaticResource TextSecondary}" />
        <Setter Property="Margin" Value="4,0,0,8" />
    </Style>

    <Style x:Key="DateStyle" TargetType="Label">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextColor" Value="{StaticResource TextSecondary}" />
        <Setter Property="Margin" Value="0,0,0,2" />
    </Style>

    <Style x:Key="PriceStyle" TargetType="Label">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontAttributes" Value="Bold" />
        <Setter Property="TextColor" Value="{StaticResource Primary}" />
    </Style>

    <Style x:Key="HintStyle" TargetType="Label">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextColor" Value="{StaticResource TextTertiary}" />
        <Setter Property="HorizontalOptions" Value="Center" />
    </Style>

    <!-- ZNACZNIKI STATUSU -->
    <Style x:Key="StatusBadgeStyle" TargetType="Border">
        <Setter Property="StrokeShape" Value="RoundRectangle 12" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalOptions" Value="Start" />
    </Style>

    <!-- POLA WPROWADZANIA DANYCH -->
    <Style x:Key="InputContainerStyle" TargetType="Border">
        <Setter Property="StrokeShape" Value="RoundRectangle 8" />
        <Setter Property="Stroke" Value="{StaticResource Border}" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="BackgroundColor" Value="{StaticResource Secondary}" />
        <Setter Property="HeightRequest" Value="50" />
    </Style>

    <Style x:Key="InputStyle" TargetType="InputView">
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Margin" Value="12,0" />
    </Style>

    <!-- STANDARDOWE KOMPONENTY MAUI -->
    <Style TargetType="ActivityIndicator">
        <Setter Property="Color" Value="{StaticResource Primary}" />
    </Style>

    <Style TargetType="IndicatorView">
        <Setter Property="IndicatorColor" Value="{StaticResource Gray300}"/>
        <Setter Property="SelectedIndicatorColor" Value="{StaticResource Primary}"/>
    </Style>

    <Style TargetType="Border">
        <Setter Property="Stroke" Value="{StaticResource Border}" />
        <Setter Property="StrokeShape" Value="Rectangle"/>
        <Setter Property="StrokeThickness" Value="1"/>
    </Style>

    <Style TargetType="Button">
        <Setter Property="TextColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontAttributes" Value="Bold"/>
        <Setter Property="BorderWidth" Value="0"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="Padding" Value="14,10"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
    </Style>

    <Style TargetType="DatePicker">
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
    </Style>

    <Style TargetType="Editor">
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="PlaceholderColor" Value="{StaticResource TextTertiary}" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
    </Style>

    <Style TargetType="Entry">
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="PlaceholderColor" Value="{StaticResource TextTertiary}" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
    </Style>

    <Style TargetType="Frame">
        <Setter Property="HasShadow" Value="False" />
        <Setter Property="BorderColor" Value="{StaticResource Border}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BackgroundColor" Value="{StaticResource SurfaceColor}" />
    </Style>

    <Style TargetType="Label">
        <Setter Property="TextColor" Value="{StaticResource TextPrimary}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular" />
        <Setter Property="FontSize" Value="16" />
    </Style>

    <Style TargetType="Page" ApplyToDerivedTypes="True">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BackgroundColor" Value="{StaticResource BackgroundColor}" />
    </Style>

    <Style TargetType="Shell" ApplyToDerivedTypes="True">
        <Setter Property="Shell.BackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="Shell.ForegroundColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="Shell.TitleColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="Shell.DisabledColor" Value="{StaticResource Gray300}" />
        <Setter Property="Shell.UnselectedColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="Shell.NavBarHasShadow" Value="True" />
        <Setter Property="Shell.TabBarBackgroundColor" Value="{StaticResource SurfaceColor}" />
        <Setter Property="Shell.TabBarForegroundColor" Value="{StaticResource Primary}" />
        <Setter Property="Shell.TabBarTitleColor" Value="{StaticResource Primary}" />
        <Setter Property="Shell.TabBarUnselectedColor" Value="{StaticResource TextSecondary}" />
    </Style>

    <Style TargetType="NavigationPage">
        <Setter Property="BarBackgroundColor" Value="{StaticResource Primary}" />
        <Setter Property="BarTextColor" Value="{StaticResource TextOnPrimary}" />
        <Setter Property="IconColor" Value="{StaticResource TextOnPrimary}" />
    </Style>
</ResourceDictionary>
---
Plik: SubscriptionManager.Application\DTOs\SubscriptionDto.cs
namespace SubscriptionManager.Application.DTOs;

public class SubscriptionDto
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public DateTime DateFrom { get; set; }
    public DateTime DateTo { get; set; }
    public decimal Price { get; set; }
    public string AvatarPath { get; set; }
    public SubscriptionStatusDto Status { get; set; }
}
---
Plik: SubscriptionManager.Application\DTOs\SubscriptionStatusDto.cs
namespace SubscriptionManager.Application.DTOs;

public enum SubscriptionStatusDto
{
    Active,
    Expiring,
    Inactive
}
---
Plik: SubscriptionManager.Application\Interfaces\IAvatarService.cs
namespace SubscriptionManager.Application.Interfaces;

public interface IAvatarService
{
    IEnumerable<string> GetAvailableAvatars();
}
---
Plik: SubscriptionManager.Application\Interfaces\IDbPathProvider.cs
namespace SubscriptionManager.Application.Interfaces;

public interface IDbPathProvider
{
    string GetDbPath();
}

---
Plik: SubscriptionManager.Application\Interfaces\IFileSystemService.cs
namespace SubscriptionManager.Application.Interfaces;

public interface IFileSystemService
{
    string GetAppDataDirectory();
}

---
Plik: SubscriptionManager.Application\Interfaces\ISubscriptionRepository.cs
using SubscriptionManager.Domain.Entities;

namespace SubscriptionManager.Application.Interfaces;

public interface ISubscriptionRepository
{
    Task<IEnumerable<Subscription>> GetAllAsync();
    Task<Subscription> GetByIdAsync(Guid id);
    Task AddAsync(Subscription subscription);
    Task UpdateAsync(Subscription subscription);
    Task DeleteAsync(Guid id);
}

---
Plik: SubscriptionManager.Application\Interfaces\ISubscriptionService.cs
using SubscriptionManager.Application.DTOs;

namespace SubscriptionManager.Application.Interfaces;

public interface ISubscriptionService
{
    Task<IEnumerable<SubscriptionDto>> GetAllSubscriptionsAsync();
    Task<SubscriptionDto> GetSubscriptionByIdAsync(Guid id);
    Task AddSubscriptionAsync(SubscriptionDto subscriptionDto);
    Task UpdateSubscriptionAsync(SubscriptionDto subscriptionDto);
    Task DeleteSubscriptionAsync(Guid id);
}
---
Plik: SubscriptionManager.Application\Mapping\ApplicationMappingProfile.cs
using AutoMapper;
using SubscriptionManager.Application.DTOs;
using SubscriptionManager.Domain.Entities;

namespace SubscriptionManager.Application.Mapping;

public class ApplicationMappingProfile : Profile
{
    public ApplicationMappingProfile()
    {
        CreateMap<Subscription, SubscriptionDto>()
            .ForMember(dest => dest.Status, opt =>
                opt.MapFrom((src, _, _, context) =>
                    MapStatus(src.GetStatus(DateTime.Today))));

        CreateMap<SubscriptionDto, Subscription>()
            .ConstructUsing(src => new Subscription(
                src.Name,
                src.DateFrom,
                src.DateTo,
                src.Price,
                src.AvatarPath))
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src =>
                src.Id != Guid.Empty ? src.Id : Guid.NewGuid()));
    }

    private static SubscriptionStatusDto MapStatus(SubscriptionStatus status)
    {
        return status switch
        {
            SubscriptionStatus.Active => SubscriptionStatusDto.Active,
            SubscriptionStatus.Expiring => SubscriptionStatusDto.Expiring,
            SubscriptionStatus.Inactive => SubscriptionStatusDto.Inactive,
            _ => SubscriptionStatusDto.Inactive
        };
    }
}
---
Plik: SubscriptionManager.Application\Services\SubscriptionService.cs
using AutoMapper;
using SubscriptionManager.Application.DTOs;
using SubscriptionManager.Application.Interfaces;
using SubscriptionManager.Domain.Entities;

namespace SubscriptionManager.Application.Services;

public class SubscriptionService : ISubscriptionService
{
    private readonly ISubscriptionRepository _subscriptionRepository;
    private readonly IMapper _mapper;

    public SubscriptionService(
        ISubscriptionRepository subscriptionRepository,
        IMapper mapper)
    {
        _subscriptionRepository = subscriptionRepository;
        _mapper = mapper;
    }

    public async Task<IEnumerable<SubscriptionDto>> GetAllSubscriptionsAsync()
    {
        var subscriptions = await _subscriptionRepository.GetAllAsync();
        return _mapper.Map<IEnumerable<SubscriptionDto>>(subscriptions);
    }

    public async Task<SubscriptionDto> GetSubscriptionByIdAsync(Guid id)
    {
        var subscription = await _subscriptionRepository.GetByIdAsync(id);
        return _mapper.Map<SubscriptionDto>(subscription);
    }

    public async Task AddSubscriptionAsync(SubscriptionDto subscriptionDto)
    {
        var subscription = _mapper.Map<Subscription>(subscriptionDto);
        await _subscriptionRepository.AddAsync(subscription);
    }

    public async Task UpdateSubscriptionAsync(SubscriptionDto subscriptionDto)
    {
        var subscription = _mapper.Map<Subscription>(subscriptionDto);
        await _subscriptionRepository.UpdateAsync(subscription);
    }

    public async Task DeleteSubscriptionAsync(Guid id)
    {
        await _subscriptionRepository.DeleteAsync(id);
    }
}
---
Plik: SubscriptionManager.Domain\Entities\Subscription.cs
using SubscriptionManager.Domain.Exceptions;

namespace SubscriptionManager.Domain.Entities;

public class Subscription
{
    public Guid Id { get; protected set; }
    public string Name { get; private set; }
    public DateTime DateFrom { get; private set; }
    public DateTime DateTo { get; private set; }
    public decimal Price { get; private set; }
    public string AvatarPath { get; private set; }

    public Subscription(string name, DateTime dateFrom, DateTime dateTo, decimal price, string avatarPath)
    {
        ValidateParameters(name, dateFrom, dateTo, price);

        Id = Guid.NewGuid();
        Name = name;
        DateFrom = dateFrom;
        DateTo = dateTo;
        Price = price;
        AvatarPath = avatarPath;
    }

    public void UpdateSubscription(string name, DateTime dateFrom, DateTime dateTo, decimal price, string avatarPath)
    {
        ValidateParameters(name, dateFrom, dateTo, price);

        Name = name;
        DateFrom = dateFrom;
        DateTo = dateTo;
        Price = price;
        AvatarPath = avatarPath;
    }

    private void ValidateParameters(string name, DateTime dateFrom, DateTime dateTo, decimal price)
    {
        if (string.IsNullOrWhiteSpace(name))
            throw new ArgumentException("Nazwa subskrypcji nie może być pusta.", nameof(name));

        if (dateFrom > dateTo)
            throw new SubscriptionDomainException("Data rozpoczęcia nie może być późniejsza niż data zakończenia.");

        if (price < 0)
            throw new ArgumentException("Cena nie może być ujemna.", nameof(price));
    }

    public SubscriptionStatus GetStatus(DateTime currentDate)
    {
        if (DateTo < currentDate)
        {
            return SubscriptionStatus.Inactive;
        }

        var daysRemaining = (DateTo - currentDate).Days;

        if (daysRemaining <= 3)
        {
            return SubscriptionStatus.Expiring;
        }

        return SubscriptionStatus.Active;
    }
}
---
Plik: SubscriptionManager.Domain\Entities\SubscriptionStatus.cs
namespace SubscriptionManager.Domain.Entities;

public enum SubscriptionStatus
{
    Active,
    Expiring,
    Inactive
}
---
Plik: SubscriptionManager.Domain\Exceptions\SubscriptionDomainException.cs
namespace SubscriptionManager.Domain.Exceptions;

public class SubscriptionDomainException : Exception
{
    public SubscriptionDomainException() { }

    public SubscriptionDomainException(string message)
        : base(message)
    {
    }

    public SubscriptionDomainException(string message, Exception innerException)
        : base(message, innerException)
    {
    }
}
---
Plik: SubscriptionManager.Infrastructure\Data\DesignTimeDbContextFactory.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace SubscriptionManager.Infrastructure.Data;

public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<SubscriptionDbContext>
{
    public SubscriptionDbContext CreateDbContext(string[] args)
    {
        var optionsBuilder = new DbContextOptionsBuilder<SubscriptionDbContext>();

        optionsBuilder.UseSqlite("Data Source=subscriptions_design.db");

        return new SubscriptionDbContext(optionsBuilder.Options);
    }
}
---
Plik: SubscriptionManager.Infrastructure\Data\SubscriptionDbContext.cs
using Microsoft.EntityFrameworkCore;
using SubscriptionManager.Infrastructure.DataModels;

namespace SubscriptionManager.Infrastructure.Data;

public class SubscriptionDbContext : DbContext
{
    public DbSet<SubscriptionEntity> Subscriptions { get; set; }

    public SubscriptionDbContext(DbContextOptions<SubscriptionDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<SubscriptionEntity>(entity =>
        {
            entity.ToTable("Subscriptions");
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Price).HasColumnType("decimal(18,2)");
            entity.Property(e => e.AvatarPath);
        });
    }
}
---
Plik: SubscriptionManager.Infrastructure\DataModels\SubscriptionEntity.cs
namespace SubscriptionManager.Infrastructure.DataModels;

public class SubscriptionEntity
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public DateTime DateFrom { get; set; }
    public DateTime DateTo { get; set; }
    public decimal Price { get; set; }
    public string AvatarPath { get; set; }
}
---
Plik: SubscriptionManager.Infrastructure\Mapping\InfrastructureMappingProfile.cs
using AutoMapper;
using SubscriptionManager.Domain.Entities;
using SubscriptionManager.Infrastructure.DataModels;

namespace SubscriptionManager.Infrastructure.Mapping;

public class InfrastructureMappingProfile : Profile
{
    public InfrastructureMappingProfile()
    {
        CreateMap<Subscription, SubscriptionEntity>();

        CreateMap<SubscriptionEntity, Subscription>()
            .ConstructUsing(src => new Subscription(
                src.Name,
                src.DateFrom,
                src.DateTo,
                src.Price,
                src.AvatarPath))
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id));
    }
}
---
Plik: SubscriptionManager.Infrastructure\Migrations\20250314084529_InitialCreate.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SubscriptionManager.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Subscriptions",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false),
                    DateFrom = table.Column<DateTime>(type: "TEXT", nullable: false),
                    DateTo = table.Column<DateTime>(type: "TEXT", nullable: false),
                    Price = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    AvatarPath = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Subscriptions", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Subscriptions");
        }
    }
}

---
Plik: SubscriptionManager.Infrastructure\Migrations\20250314084529_InitialCreate.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubscriptionManager.Infrastructure.Data;

#nullable disable

namespace SubscriptionManager.Infrastructure.Migrations
{
    [DbContext(typeof(SubscriptionDbContext))]
    [Migration("20250314084529_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("SubscriptionManager.Infrastructure.DataModels.SubscriptionDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

---
Plik: SubscriptionManager.Infrastructure\Migrations\SubscriptionDbContextModelSnapshot.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubscriptionManager.Infrastructure.Data;

#nullable disable

namespace SubscriptionManager.Infrastructure.Migrations
{
    [DbContext(typeof(SubscriptionDbContext))]
    partial class SubscriptionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("SubscriptionManager.Infrastructure.DataModels.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

---
Plik: SubscriptionManager.Infrastructure\Repositories\InMemorySubscriptionRepository.cs
using SubscriptionManager.Application.Interfaces;
using SubscriptionManager.Domain.Entities;

namespace SubscriptionManager.Infrastructure.Repositories;

public class InMemorySubscriptionRepository : ISubscriptionRepository
{
    private readonly List<Subscription> _subscriptions = new();

    public Task<IEnumerable<Subscription>> GetAllAsync()
    {
        return Task.FromResult(_subscriptions.AsEnumerable());
    }

    public Task<Subscription> GetByIdAsync(Guid id)
    {
        var subscription = _subscriptions.FirstOrDefault(s => s.Id == id);
        return Task.FromResult(subscription);
    }

    public Task AddAsync(Subscription subscription)
    {
        if (subscription == null)
            throw new ArgumentNullException(nameof(subscription));

        _subscriptions.Add(subscription);
        return Task.CompletedTask;
    }

    public Task UpdateAsync(Subscription subscription)
    {
        if (subscription == null)
            throw new ArgumentNullException(nameof(subscription));

        var index = _subscriptions.FindIndex(s => s.Id == subscription.Id);
        if (index != -1)
        {
            _subscriptions[index] = subscription;
        }
        else
        {
            throw new KeyNotFoundException($"Subskrypcja o identyfikatorze {subscription.Id} nie została znaleziona.");
        }

        return Task.CompletedTask;
    }
    public Task DeleteAsync(Guid id)
    {
        var subscription = _subscriptions.FirstOrDefault(s => s.Id == id);
        if (subscription != null)
        {
            _subscriptions.Remove(subscription);
        }
        else
        {
            throw new KeyNotFoundException($"Subskrypcja o identyfikatorze {id} nie została znaleziona.");
        }

        return Task.CompletedTask;
    }
}
---
Plik: SubscriptionManager.Infrastructure\Repositories\SQLiteSubscriptionRepository.cs
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using SubscriptionManager.Application.Interfaces;
using SubscriptionManager.Domain.Entities;
using SubscriptionManager.Infrastructure.Data;
using SubscriptionManager.Infrastructure.DataModels;

namespace SubscriptionManager.Infrastructure.Repositories;

public class SQLiteSubscriptionRepository : ISubscriptionRepository
{
    private readonly SubscriptionDbContext _dbContext;
    private readonly IMapper _mapper;

    public SQLiteSubscriptionRepository(
        SubscriptionDbContext dbContext,
        IMapper mapper)
    {
        _dbContext = dbContext;
        _mapper = mapper;
    }

    public async Task<IEnumerable<Subscription>> GetAllAsync()
    {
        var entities = await _dbContext.Subscriptions.ToListAsync();
        return _mapper.Map<IEnumerable<Subscription>>(entities);
    }

    public async Task<Subscription> GetByIdAsync(Guid id)
    {
        var entity = await _dbContext.Subscriptions.FindAsync(id);
        return _mapper.Map<Subscription>(entity);
    }

    public async Task AddAsync(Subscription subscription)
    {
        var entity = _mapper.Map<SubscriptionEntity>(subscription);
        await _dbContext.Subscriptions.AddAsync(entity);
        await _dbContext.SaveChangesAsync();
    }

    public async Task UpdateAsync(Subscription subscription)
    {
        var entity = _mapper.Map<SubscriptionEntity>(subscription);

        var existingEntity = await _dbContext.Subscriptions.FindAsync(entity.Id);
        if (existingEntity == null)
        {
            throw new KeyNotFoundException($"Subskrypcja o identyfikatorze {entity.Id} nie została znaleziona.");
        }

        _dbContext.Entry(existingEntity).CurrentValues.SetValues(entity);
        await _dbContext.SaveChangesAsync();
    }

    public async Task DeleteAsync(Guid id)
    {
        var entity = await _dbContext.Subscriptions.FindAsync(id);
        if (entity != null)
        {
            _dbContext.Subscriptions.Remove(entity);
            await _dbContext.SaveChangesAsync();
        }
        else
        {
            throw new KeyNotFoundException($"Subskrypcja o identyfikatorze {id} nie została znaleziona.");
        }
    }
}
---
Plik: SubscriptionManager.Infrastructure\Services\AvatarService.cs
using SubscriptionManager.Application.Interfaces;

namespace SubscriptionManager.Infrastructure.Services;

public class AvatarService : IAvatarService
{
    public IEnumerable<string> GetAvailableAvatars()
    {
        return new List<string>
        {
            "logo_netflix.png",
            "logo_prime.png",
            "logo_xbox.png",
            "logo_upload.png"};
    }
}
---
Plik: SubscriptionManager.Infrastructure\Services\DbPathProvider.cs
using SubscriptionManager.Application.Interfaces;

namespace SubscriptionManager.Infrastructure.Services;

public class DbPathProvider : IDbPathProvider
{
    private readonly IFileSystemService _fileSystemService;

    public DbPathProvider(IFileSystemService fileSystemService)
    {
        _fileSystemService = fileSystemService;
    }

    public string GetDbPath()
    {
        var basePath = _fileSystemService.GetAppDataDirectory();
        return Path.Combine(basePath, "subscriptions.db");
    }
}

---
